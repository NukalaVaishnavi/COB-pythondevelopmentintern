pip install cryptography
from cryptography.fernet import Fernet
import json
import os

class PasswordManager:
    def _init_(self, master_password):
        self.master_password = master_password
        self.key = self.generate_key(master_password)
        self.file_path = "passwords.txt"

    def generate_key(self, master_password):
        # Use a key derivation function to generate a key from the master password
        # For simplicity, you can use a hashing function like SHA-256
        # Remember, this is a simplified example and not suitable for production
        encoded_password = master_password.encode()
        key = Fernet.generate_key()
        return key

    def encrypt_password(self, password):
        cipher_suite = Fernet(self.key)
        encrypted_password = cipher_suite.encrypt(password.encode())
        return encrypted_password

    def decrypt_password(self, encrypted_password):
        cipher_suite = Fernet(self.key)
        decrypted_password = cipher_suite.decrypt(encrypted_password)
        return decrypted_password.decode()

    def save_password(self, service, username, password):
        encrypted_password = self.encrypt_password(password)
        data = {service: {"username": username, "password": encrypted_password.decode()}}
        if os.path.exists(self.file_path):
            with open(self.file_path, "r") as file:
                try:
                    passwords = json.load(file)
                except json.decoder.JSONDecodeError:
                    passwords = {}
        else:
            passwords = {}
        
        passwords.update(data)
        with open(self.file_path, "w") as file:
            json.dump(passwords, file)

    def get_password(self, service):
        with open(self.file_path, "r") as file:
            passwords = json.load(file)
            if service in passwords:
                encrypted_password = passwords[service]["password"]
                decrypted_password = self.decrypt_password(encrypted_password.encode())
                return decrypted_password
            else:
                return "Service not found"


# Example usage:
master_password = "your_master_password"

password_manager = PasswordManager(master_password)

# Save passwords
password_manager.save_password("Google", "username", "google_password")
password_manager.save_password("Facebook", "user123", "fb_password")

# Retrieve password
retrieved_password = password_manager.get_password("Google")
print("Retrieved Password:", retrieved_password)
